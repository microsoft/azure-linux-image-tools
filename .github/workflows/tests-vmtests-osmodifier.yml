# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

name: Tests VMTests suite for OSModifier

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      hostArch:
        required: true
        type: string
      hostDistro:
        required: true
        type: string

env:
  EXPECTED_GO_VERSION: "1.24.1"
  IMAGE_CUSTOMIZER_CONTAINER_TAG: "imagecustomizer:dev"

jobs:
  tests-osmodifier:
    name: Tests OSModifier suite
    runs-on:
      - self-hosted
      - 1ES.Pool=${{ inputs.hostDistro == 'azl3' && (inputs.hostArch == 'amd64' && 'maritimus-github-runner-azl3-amd64' || 'maritimus-github-runner-azl3-arm64') || (inputs.hostArch == 'amd64' && 'maritimus-github-runner-ubuntu2404-amd64' || 'maritimus-github-runner-ubuntu2404-arm64') }}
    permissions:
      contents: read

    steps:
      - name: Setup Go toolchain
        uses: actions/setup-go@v5
        with:
          go-version: "${{ env.EXPECTED_GO_VERSION }}"

      - name: Install prerequisites (AZL3)
        if: inputs.hostDistro == 'azl3'
        env:
          HOST_ARCH: ${{ inputs.hostArch }}
        run: |
          set -eux
          sudo tdnf install -y \
            libvirt libvirt-daemon libvirt-daemon-config-network \
            libvirt-daemon-kvm libvirt-devel qemu-kvm qemu-img python3-libvirt \
            python3-devel edk2-ovmf azure-cli \
            rpm coreutils util-linux systemd openssl \
            sed createrepo_c squashfs-tools cdrkit e2fsprogs dosfstools \
            xfsprogs zstd veritysetup grub2 binutils lsof git docker
          if [[ "$HOST_ARCH" == "amd64" ]]; then
            sudo tdnf install -y grub2-pc
          fi
          sudo systemctl restart libvirtd
          sudo systemctl status libvirtd

      - name: Install prerequisites (Ubuntu 24.04)
        if: inputs.hostDistro == 'ubuntu2404'
        env:
          HOST_ARCH: ${{ inputs.hostArch }}
        run: |
          set -eux
          sudo apt update -y
          sudo apt -y install \
            qemu-utils rpm coreutils util-linux mount fdisk udev openssl \
            sed createrepo-c squashfs-tools genisoimage e2fsprogs dosfstools \
            xfsprogs zstd cryptsetup-bin grub2-common binutils lsof \
            python3-venv python3-pip python3-dev \
            libvirt-dev libvirt-daemon libvirt-daemon-system libvirt-clients \
            qemu-kvm virt-manager docker.io
          if [[ "$HOST_ARCH" == "arm64" ]]; then
            sudo apt -y install qemu-system-arm qemu-efi-aarch64 ovmf vgabios
          fi
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash || true
          sudo systemctl restart libvirtd

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: repo

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: out

      - name: Import container
        id: importContainer
        run: |
          set -eux

          CONTAINER_TAR_PATH="out/container-${{ inputs.hostArch }}/imagecustomizer.tar.gz"
          DOCKER_OUTPUT=$(sudo docker image load -i "$CONTAINER_TAR_PATH" 2>&1)
          CONTAINER_TAG=$(echo $DOCKER_OUTPUT | awk '{print $3}')

          echo "containerTag=$CONTAINER_TAG" >> "$GITHUB_OUTPUT"
        env:
          HOST_ARCH: ${{ inputs.hostArch }}

      - name: Verify osmodifier binary
        id: osmodifier_bin
        run: |
          set -eux
          # Use the downloaded binary artifact
          OSMODIFIER_BIN="out/osmodifier-${{ inputs.hostArch }}/osmodifier"
          [[ -f "$OSMODIFIER_BIN" ]] || { echo "osmodifier binary not found at $OSMODIFIER_BIN"; ls -la out/; exit 1; }
          chmod +x "$OSMODIFIER_BIN"
          echo "path=$OSMODIFIER_BIN" >> "$GITHUB_OUTPUT"

      - name: Setup input image
        id: setup_image
        run: |
          set -eux

          # Define image paths based on distro and arch
          if [[ "${{ inputs.hostDistro }}" == "azl3" ]]; then
            if [[ "${{ inputs.hostArch }}" == "amd64" ]]; then
              INPUT_IMAGE="/shared/images/azl3-amd64-base.vhd"
            else
              INPUT_IMAGE="/shared/images/azl3-arm64-base.vhd"
            fi
          else
            # ubuntu2404
            if [[ "${{ inputs.hostArch }}" == "amd64" ]]; then
              INPUT_IMAGE="/shared/images/ubuntu2404-amd64-base.vhd"
            else
              INPUT_IMAGE="/shared/images/ubuntu2404-arm64-base.vhd"
            fi
          fi

          # Verify the image exists
          [[ -f "$INPUT_IMAGE" ]] || { echo "Input image not found at $INPUT_IMAGE"; exit 1; }
          echo "path=$INPUT_IMAGE" >> "$GITHUB_OUTPUT"

      - name: Test setup (venv, SSH key)
        run: |
          set -eux
          pushd ./repo/test/vmtests
          [[ -f ~/.ssh/id_ed25519 ]] || ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N ""
          make create-venv
          popd

      - name: Run OSModifier tests
        working-directory: repo/test/vmtests
        env:
          IMAGE_CUSTOMIZER_CONTAINER_TAG: ${{ steps.importContainer.outputs.containerTag }}
          OSMODIFIER_BIN: ${{ steps.osmodifier_bin.outputs.path }}
          INPUT_IMAGE: ${{ steps.setup_image.outputs.path }}
        run: |
          set -eux
          sudo make test-osmodifier \
            IMAGE_CUSTOMIZER_CONTAINER_TAG="${IMAGE_CUSTOMIZER_CONTAINER_TAG}" \
            OSMODIFIER_BIN="${OSMODIFIER_BIN}" \
            INPUT_IMAGE="${INPUT_IMAGE}" \
            SSH_PRIVATE_KEY_FILE="$HOME/.ssh/id_ed25519" \
            LOGS_DIR="./out"

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: tests-results-osmodifier-${{ inputs.hostDistro }}-${{ inputs.hostArch }}
          path: repo/test/vmtests/out
