# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

name: Tests functional

permissions:
  contents: read
  # Azure login.
  id-token: write

on:
  workflow_call:
    inputs:
      hostArch:
        required: true
        type: string
      hostDistro:
        required: true
        type: string

env:
  EXPECTED_GO_VERSION: "1.24.1"
  ORAS_VERSION: "1.2.3"

jobs:
  tests-functional:
    name: Funtional test suite
    runs-on:
    - self-hosted
    - 1ES.Pool=${{ inputs.hostDistro == 'azl3' && (inputs.hostArch == 'amd64' && 'maritimus-github-runner-azl3-amd64' || 'maritimus-github-runner-azl3-arm64') || 'maritimus-github-runner-ubuntu2404-amd64'}}
    permissions:
      contents: read
      # Azure login.
      id-token: write
    environment: public
    steps:
    - name: setup go 1.x
      uses: actions/setup-go@v5
      with:
        go-version: "${{ env.EXPECTED_GO_VERSION }}"

    - name: Install prerequisites (AZL3)
      if: inputs.hostDistro == 'azl3'
      run: |
        set -eux

        # Install Image Customizer prerequisities.
        sudo tdnf install -y qemu-img rpm coreutils util-linux systemd openssl \
          sed createrepo_c squashfs-tools cdrkit e2fsprogs dosfstools \
          xfsprogs zstd veritysetup grub2 binutils lsof \
          git azure-cli

        # grub2-pc is only available on x86.
        if [[ "${{ inputs.hostArch }}" == "amd64" ]]; then
          sudo tdnf install -y grub2-pc
        fi

        sudo tdnf list installed

    - name: Install prerequisites (Ubuntu 24.04)
      if: inputs.hostDistro == 'ubuntu2404'
      run: |
        set -eux

        # Install Image Customizer prerequisities.
        sudo apt list --installed
        sudo apt update -y

        sudo apt -y install qemu-utils rpm coreutils util-linux mount fdisk udev openssl \
          sed createrepo-c squashfs-tools genisoimage e2fsprogs dosfstools \
          xfsprogs zstd cryptsetup-bin grub2-common binutils lsof

        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ vars.AZURE_CLIENT_ID }}
        tenant-id: ${{ vars.AZURE_TENANT_ID }}
        subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: repo

    - name: Download base images
      run: |
        set -eux

        ./repo/.github/workflows/scripts/download-image.sh "$AZURE_STORAGE" "$AZURE_CONTAINER" "azure-linux/core-efi-vhdx-2.0-$HOST_ARCH" azl-core-efi-2.0
        ./repo/.github/workflows/scripts/download-image.sh "$AZURE_STORAGE" "$AZURE_CONTAINER" "azure-linux/core-efi-vhdx-3.0-$HOST_ARCH" azl-core-efi-3.0
      env:
        HOST_ARCH: ${{ inputs.hostArch }}
        AZURE_STORAGE: ${{ vars.AZURE_STORAGE }}
        AZURE_CONTAINER: ${{ vars.AZURE_CONTAINER }}

    - name: Test setup
      run: |
        set -eux

        pushd repo/toolkit/tools

        # Download the test RPM files.
        ./internal/testutils/testrpms/download-test-utils.sh

        mkdir -p out/testResults

    - name: Run tests
      run: |
        set -eux
        set -o pipefail

        pushd repo/toolkit/tools

        AZL2_VHDX="../../../azl-core-efi-2.0/image.vhdx"
        AZL3_VHDX="../../../azl-core-efi-3.0/image.vhdx"

        FAILED=0

        sudo env "PATH=$PATH" go test -v \
          -coverprofile=out/testResults/api.cov -covermode count \
          ./imagecustomizerapi \
          2>&1 \
          | tee out/testResults/api.txt \
          || FAILED=$(( $FAILED | 1 ))

        sudo env "PATH=$PATH" go test -v \
          -coverprofile=out/testResults/lib.cov -covermode count \
          -timeout 60m \
          ./pkg/imagecustomizerlib \
          -args \
          --base-image-core-efi-azl2 "../../$AZL2_VHDX" \
          --base-image-core-efi-azl3 "../../$AZL3_VHDX" \
          2>&1 \
          | tee out/testResults/lib.txt \
          || FAILED=$(( $FAILED | 2 ))

        exit $FAILED

    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: tests-results-functional-${{ inputs.hostDistro }}-${{ inputs.hostArch }}
        path: repo/toolkit/tools/out/testResults
